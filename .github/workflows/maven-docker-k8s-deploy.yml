# This workflow will build a Java project with Maven and Docker and deploy the builds to k8s cluster
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Keyist CI/CD Pipeline

on:
  push:
    branches: [ master ]
#   workflow_dispatch:
jobs:
   build-and-test:
     runs-on: ubuntu-latest
     steps:
     - uses: actions/checkout@v2
     - name: Set up JDK 11 for x64
       uses: actions/setup-java@v4
       with:
         java-version: '11'
         distribution: 'temurin'
         architecture: x64
         cache: maven
     - name: Build Resource Server with Maven
       continue-on-error: true
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
       run: mvn -B clean install --file resource_server/pom.xml
     - name: SonarQube Scan for Resource Server
       uses: sonarsource/sonarqube-scan-action@master
       env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
       with:
          projectBaseDir: ./resource_server
     - name: SonarQube Quality Gate check Resource Server
       id: sonarqube-quality-gate-check-resource-server
       uses: sonarsource/sonarqube-quality-gate-action@master
       # Force to fail step after specific time.
       timeout-minutes: 5
       env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
       with:
        scanMetadataReportFile: ./resource_server/.scannerwork/report-task.txt
     - name: "SonarQube Quality Gate Status value - Resource Server"
       run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check-resource-server.outputs.quality-gate-status }}"
     - name: Build Authorization Server with Maven
       continue-on-error: true
       env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
       run: mvn -B clean install --file authorization_server/pom.xml
     - name: SonarQube Scan for Authorization Server
       uses: sonarsource/sonarqube-scan-action@master
       env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
       with:
         projectBaseDir: ./authorization_server
     - name: SonarQube Quality Gate check for authorization server
       id: sonarqube-quality-gate-check-auth-server
       uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
       timeout-minutes: 5
       env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
       with:
          scanMetadataReportFile: ./authorization_server/.scannerwork/report-task.txt
     - name: "SonarQube Quality Gate Status value - Authorization Server"
       run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check-auth-server.outputs.quality-gate-status }}"


   docker-build-and-push:
      needs: build-and-test
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        -
          name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        -
          name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        -
          name: Build and push Resource Server
          uses: docker/build-push-action@v5
          with:
            context: ./resource_server
            push: true
            tags: kvempali/keyist-resource-server:latest
        -
          name: Build and push Auth Server
          uses: docker/build-push-action@v5
          with:
            context: ./authorization_server
            push: true
            tags: kvempali/keyist-authorization-server:latest
        -
          name: Build and push UI Client
          uses: docker/build-push-action@v5
          with:
            context: ./client
            push: true
            tags: kvempali/keyist-client:latest

   deploy:
     needs: docker-build-and-push
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v4
       - uses: azure/setup-kubectl@v4
       # Set the target AKS cluster.
       - uses: azure/k8s-actions/k8s-set-context@master
         with:
           kubeconfig: ${{secrets.KUBECONFIG}}
         env:
           ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
       - uses: Azure/k8s-deploy@v5
         with:
           action: deploy
           manifests: k8s/
       - name: Deploy Rollout of Resource Server
         continue-on-error: true
         run: kubectl rollout restart deployment keyist-resource-server
       - name: Deploy Rollout of Authorization Server
         continue-on-error: true
         run: kubectl rollout restart deployment keyist-auth-server
       - name: Deploy Rollout of UI Client
         continue-on-error: true
         run: kubectl rollout restart deployment keyist-client
